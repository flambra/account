definitions:
  domain.AuthSignInRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  domain.AuthTwoFactorGenerateRequest:
    properties:
      method:
        type: string
      token:
        type: string
    type: object
  domain.AuthTwoFactorValidateRequest:
    properties:
      code:
        type: string
      token:
        type: string
    type: object
  domain.Profile:
    properties:
      availability:
        type: boolean
      avgDelivery:
        type: number
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      instagramFollowers:
        type: integer
      languages:
        type: string
      lastDelivery:
        type: string
      level:
        type: integer
      location:
        type: string
      phoneType:
        type: string
      portfolio:
        type: string
      rating:
        type: number
      requests:
        type: integer
      returnRate:
        type: number
      skills:
        type: string
      specializations:
        type: string
      successRate:
        type: number
      tiktokFollowers:
        type: integer
      updatedAt:
        type: string
      userID:
        type: integer
      youtubeFollowers:
        type: integer
    type: object
  domain.ProfileUpdateRequest:
    properties:
      availability:
        type: boolean
      description:
        type: string
      languages:
        type: string
      location:
        type: string
      phone_type:
        type: string
      portfolio:
        type: string
      skills:
        type: string
      specializations:
        type: string
      userID:
        type: integer
    type: object
  domain.User:
    properties:
      address:
        type: string
      birthDate:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      firstName:
        type: string
      hashedPassword:
        type: string
      id:
        type: integer
      lastCode:
        type: string
      lastName:
        type: string
      phone:
        type: string
      profile:
        $ref: '#/definitions/domain.Profile'
      taxNumber:
        type: string
      updatedAt:
        type: string
      userType:
        type: string
    type: object
  domain.UserCreateRequest:
    properties:
      address:
        type: string
      birth_date:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone:
        type: string
      tax_number:
        type: string
      user_type:
        type: string
    type: object
  domain.UserUpdateRequest:
    properties:
      address:
        type: string
      birth_date:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone:
        type: string
      tax_number:
        type: string
      user_type:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  hRepository.Paginator:
    properties:
      limit:
        type: integer
      page:
        type: integer
      rows: {}
      sort:
        type: string
      total_pages:
        type: integer
      total_rows:
        type: integer
    type: object
  hResp.DefaultResponse:
    description: Default response structure
    properties:
      message:
        type: string
    type: object
  hToken.Access:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
externalDocs:
  url: https://github.com/flambra/account
info:
  contact: {}
  description: This API is for the Flambra Account service.
  title: Flambra Account API
paths:
  /auth/refreshtoken:
    post:
      consumes:
      - application/json
      description: Refresh an access token using a refresh token
      parameters:
      - description: Bearer <access token>
        in: header
        name: Authorization
        type: string
      - description: Refresh Token Request
        in: body
        name: request
        schema:
          $ref: '#/definitions/hToken.Access'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hToken.Access'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
      summary: Refresh an access token
      tags:
      - Auth
  /auth/signin:
    post:
      consumes:
      - application/json
      description: Sign in a user with email and password
      parameters:
      - description: Auth Sign In Request
        in: body
        name: auth
        required: true
        schema:
          $ref: '#/definitions/domain.AuthSignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Access token generated successfully
          schema:
            $ref: '#/definitions/hToken.Access'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
      summary: Sign in a user
      tags:
      - Auth
  /auth/twofactor/send:
    post:
      consumes:
      - application/json
      description: Send a 2FA code to the user's email or phone
      parameters:
      - description: Bearer <access token>
        in: header
        name: Authorization
        type: string
      - description: TwoFactor Generate Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.AuthTwoFactorGenerateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 2FA code sent successfully
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
      summary: Send 2FA code
      tags:
      - Auth
  /auth/twofactor/validate:
    post:
      consumes:
      - application/json
      description: Validate the 2FA code provided by the user
      parameters:
      - description: Bearer <access token>
        in: header
        name: Authorization
        type: string
      - description: TwoFactor Validate Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.AuthTwoFactorValidateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 2FA code validated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
      summary: Validate 2FA code
      tags:
      - Auth
  /profile:
    get:
      consumes:
      - application/json
      description: List all profiles
      parameters:
      - description: Bearer <access token>
        in: header
        name: Authorization
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Profile'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
      summary: List profiles
      tags:
      - Profile
  /profile/{id}:
    get:
      consumes:
      - application/json
      description: Get a profile by ID
      parameters:
      - description: Bearer <access token>
        in: header
        name: Authorization
        type: string
      - description: Profile ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Profile'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
      summary: Get a profile
      tags:
      - Profile
    put:
      consumes:
      - application/json
      description: Update a profile's details by ID
      parameters:
      - description: Bearer <access token>
        in: header
        name: Authorization
        type: string
      - description: Profile ID
        in: path
        name: id
        required: true
        type: integer
      - description: Profile Update Request
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/domain.ProfileUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Profile'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
      summary: Update a profile
      tags:
      - Profile
  /user:
    get:
      consumes:
      - application/json
      description: Get a page of user
      parameters:
      - description: Bearer <access token>
        in: header
        name: Authorization
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page limit
        in: query
        name: limit
        type: integer
      - description: Sort by
        in: query
        name: sort
        type: string
      - description: Search by Name
        in: query
        name: name
        type: string
      - description: Search by Address
        in: query
        name: address
        type: string
      - description: Search by UserType
        in: query
        name: usertype
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hRepository.Paginator'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
      summary: Get a page
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details
      parameters:
      - description: User Create Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.UserCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
      summary: Create a new user
      tags:
      - User
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: Bearer <access token>
        in: header
        name: Authorization
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
      summary: Delete a user
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Get a user by ID
      parameters:
      - description: Bearer <access token>
        in: header
        name: Authorization
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
      summary: Get a user
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update a user's details by ID
      parameters:
      - description: Bearer <access token>
        in: header
        name: Authorization
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Update Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/hResp.DefaultResponse'
      summary: Update a user
      tags:
      - User
swagger: "2.0"
